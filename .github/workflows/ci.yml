name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  test:
    name: Test
    runs-on: macos-latest
    
    strategy:
      matrix:
        destination: ['platform=iOS Simulator,name=iPhone 15,OS=17.0']
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install XcodeGen
      run: |
        brew install xcodegen
        
    - name: Generate Xcode Project
      run: |
        xcodegen generate
        
    - name: Build Swift Packages
      run: |
        swift build
        
    - name: Run Swift Package Tests
      run: |
        swift test
        
    - name: Build iOS App
      run: |
        set -o pipefail && xcodebuild \
          -project DigitonePad.xcodeproj \
          -scheme DigitonePad \
          -destination '${{ matrix.destination }}' \
          clean build \
          | xcpretty
          
    - name: Run iOS Tests
      run: |
        set -o pipefail && xcodebuild \
          -project DigitonePad.xcodeproj \
          -scheme DigitonePad \
          -destination '${{ matrix.destination }}' \
          test \
          | xcpretty
          
  lint:
    name: SwiftLint
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint --strict
        
  security:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Security Scan
      run: |
        # Basic security checks for sensitive files
        if find . -name "*.plist" -exec grep -l "API" {} \; | grep -v ".git"; then
          echo "Warning: Found potential API keys in plist files"
          exit 1
        fi
        
        if find . -name "*.swift" -exec grep -l "API_KEY\|SECRET\|PASSWORD" {} \; | grep -v ".git"; then
          echo "Warning: Found potential hardcoded secrets"
          exit 1
        fi
        
        echo "Security scan passed" 
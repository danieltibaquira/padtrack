{
  "master": {
    "tasks": [
      {
        "id": 92,
        "title": "Implement FM TONE Voice Machine",
        "description": "Create the 4-operator FM synthesis engine with 8 algorithms for melodic and harmonic sounds",
        "details": "Implement the FM TONE machine with the following components:\n1. Four sine-wave operators (C, A, B1, B2) with modulation capabilities\n2. 8 selectable routing algorithms determining carrier/modulator relationships\n3. Dedicated modulator envelopes (ADE or ASDE) for timbre shaping\n4. HARM parameter to alter operator waveforms beyond pure sine waves\n5. Parameter pages with all controls: ALGO, RATIO C/A/B, HARM, DTUN, FDBK, MIX, ATK, DEC, END, LEV, etc.\n\nImplementation should use AVAudioEngine and follow the VoiceMachine protocol. Ensure real-time parameter control and efficient DSP processing.",
        "testStrategy": "1. Unit test each operator and algorithm configuration\n2. Perform offline render tests with FFT analysis to verify correct harmonic content\n3. Test parameter changes in real-time\n4. Validate CPU usage remains within acceptable limits\n5. Compare output against reference sounds from the hardware Digitone",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement FM Operators",
            "description": "Create the core FM operator class with sine wave generation, frequency control, and modulation input/output capabilities.",
            "dependencies": [],
            "details": "Develop a C++ class for FM operators that handles: 1) Sine wave generation with anti-aliasing, 2) Frequency ratio and fine-tuning controls, 3) Modulation input handling, 4) Output level scaling, 5) Unit tests for accuracy and performance.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Design Algorithm Routing System",
            "description": "Create a flexible routing system to connect operators in different FM algorithms (e.g., DX7-style algorithms).",
            "dependencies": [1],
            "details": "Implement a routing matrix that: 1) Supports at least 8 classic FM algorithms, 2) Allows dynamic switching between algorithms, 3) Handles proper signal flow between operators, 4) Provides visualization data for UI, 5) Includes preset configurations for common FM sounds.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Develop Envelope Generator",
            "description": "Create ADSR envelope generators for amplitude and modulation control of each operator.",
            "dependencies": [1],
            "details": "Build an envelope system with: 1) ADSR stages with customizable curves, 2) Rate and level controls for each stage, 3) Velocity sensitivity, 4) Loop modes for sustained sounds, 5) Optimized calculation for real-time performance.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Parameter Control System",
            "description": "Design a comprehensive parameter management system for all FM synthesis controls.",
            "dependencies": [1, 2, 3],
            "details": "Create a parameter system that: 1) Manages all operator parameters (frequency, level, etc.), 2) Handles envelope parameters, 3) Controls algorithm selection, 4) Supports MIDI CC mapping, 5) Implements parameter smoothing for click-free changes, 6) Provides preset storage and recall.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Optimize DSP Performance",
            "description": "Optimize the FM synthesis engine for efficient CPU usage and minimal latency.",
            "dependencies": [1, 2, 3, 4],
            "details": "Performance optimization including: 1) SIMD vectorization for parallel processing, 2) Efficient memory usage and cache optimization, 3) Lookup tables for trigonometric functions, 4) Dynamic voice allocation, 5) Benchmarking and profiling to identify bottlenecks, 6) Implement oversampling for high-quality mode.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Integrate with Audio Engine",
            "description": "Connect the FM synthesis module with the main audio engine, handling voice allocation, polyphony, and audio I/O.",
            "dependencies": [5],
            "details": "Integration tasks including: 1) Voice allocation and management for polyphony, 2) MIDI input handling for note events, 3) Audio buffer processing, 4) Integration with the main audio callback, 5) Thread-safe parameter updates, 6) Testing with various buffer sizes and sample rates.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 93,
        "title": "Implement FM DRUM Voice Machine",
        "description": "Create the specialized FM engine optimized for percussive and drum sounds",
        "details": "Implement the FM DRUM machine with these key components:\n1. Split architecture with 'Body' component for fundamental tone\n2. 'Noise/Transient' component for initial attack\n3. Pitch sweep functionality for creating dynamic transients\n4. Wavefolding capability for complex harmonics\n5. Percussion-specific envelope shapes and modulation\n\nEnsure the implementation follows the VoiceMachine protocol and integrates with the AudioEngine module. Optimize for low-latency performance critical for percussion sounds.",
        "testStrategy": "1. Create test suite for various drum types (kick, snare, hi-hat, etc.)\n2. Perform transient analysis to verify attack characteristics\n3. Test extreme parameter settings for stability\n4. Benchmark CPU usage during rapid triggering\n5. Compare output against reference drum sounds from hardware Digitone",
        "priority": "high",
        "dependencies": [92],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 94,
        "title": "Implement WAVETONE Voice Machine",
        "description": "Create the versatile synthesis engine combining wavetable and phase distortion techniques",
        "details": "Implement the WAVETONE machine with these features:\n1. Dual-oscillator engine supporting both wavetable and phase distortion synthesis\n2. Oscillator modulation options including Ring Modulation and Hard Sync\n3. Flexible noise generator with multiple types (Grain, Tuned, Sample & Hold)\n4. Dedicated noise envelope (ATK, HOLD, DEC)\n5. Parameter pages with all controls: TUN, WAV, PD, LEV, OFS, TBL, MOD, etc.\n\nImplement wavetable loading and interpolation system. Create phase distortion algorithms that can morph between waveforms. Ensure the implementation adheres to the VoiceMachine protocol.",
        "testStrategy": "1. Test wavetable interpolation accuracy\n2. Verify phase distortion algorithms produce expected waveforms\n3. Test modulation types (Ring Mod, Hard Sync) against reference implementations\n4. Validate noise generator types produce correct spectral characteristics\n5. Perform CPU usage profiling during complex modulation scenarios",
        "priority": "high",
        "dependencies": [92],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 95,
        "title": "Implement Main UI Layout",
        "description": "Create the main synthesizer interface with hardware-accurate layout and controls",
        "details": "Implement the main UI layout that replicates the Digitone hardware interface:\n1. Step sequencer grid (16 steps) with LED-style indicators\n2. 8 parameter encoders with value displays\n3. Transport controls (play, stop, record)\n4. Track selection buttons (1-4)\n5. Function buttons (grid, parameter, mixer)\n6. Mode selection (pattern, song, live)\n7. Display area for parameter names and values\n8. Navigation controls for parameter pages\n\nEnsure the layout adapts properly to iPad screen sizes and orientations. Implement proper touch handling and visual feedback.",
        "testStrategy": "1. Test layout adaptation across different iPad sizes\n2. Verify all touch interactions work correctly\n3. Test parameter encoder response and visual feedback\n4. Validate step sequencer grid functionality\n5. Test UI responsiveness during audio processing",
        "priority": "high",
        "dependencies": [92, 93, 94],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 96,
        "title": "Connect UI to Audio Engine",
        "description": "Bridge the UI controls with the underlying audio synthesis engines",
        "details": "Create the integration layer that connects UI interactions to audio parameter changes:\n1. Parameter mapping from UI controls to voice machine parameters\n2. Real-time parameter updates without audio artifacts\n3. MIDI CC mapping for external controller support\n4. Parameter automation and recording\n5. Voice machine selection and switching\n6. Project and preset management integration\n7. Step sequencer to audio engine integration\n\nImplement proper threading to ensure UI updates don't block audio processing.",
        "testStrategy": "1. Test parameter changes produce immediate audio response\n2. Verify no audio artifacts during parameter automation\n3. Test MIDI CC mapping and external controller support\n4. Validate voice machine switching works correctly\n5. Test project loading and saving with parameter states",
        "priority": "high",
        "dependencies": [95],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 97,
        "title": "Implement Filter Systems",
        "description": "Create comprehensive filtering capabilities for all voice machines",
        "details": "Implement various filter types and configurations:\n1. 4-pole ladder filter (Moog-style)\n2. Multi-mode filter (lowpass, highpass, bandpass, notch)\n3. State variable filters with resonance control\n4. Filter envelope generators\n5. Keyboard tracking for filter cutoff\n6. LFO modulation routing to filters\n\nEnsure filters integrate properly with all voice machines and provide smooth parameter control.",
        "testStrategy": "1. Test filter frequency response across the audio spectrum\n2. Verify resonance control without instability\n3. Test keyboard tracking accuracy\n4. Validate envelope and LFO modulation\n5. Test filter performance with polyphonic voices",
        "priority": "high",
        "dependencies": [92, 93, 94],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 98,
        "title": "Implement Effects System",
        "description": "Create comprehensive effects processing for tracks and master output",
        "details": "Implement various effects processors:\n1. Track effects: bit reduction, sample rate reduction, overdrive\n2. Send effects: delay, reverb, chorus\n3. Master effects: compressor, overdrive, limiter\n4. Effects parameter control and automation\n5. Effects routing and send levels\n6. Preset management for effects\n\nEnsure effects processing is optimized for real-time performance.",
        "testStrategy": "1. Test each effect type for proper audio processing\n2. Verify effects routing and send levels\n3. Test effects parameter automation\n4. Validate CPU usage during complex effects chains\n5. Test effects presets and recall functionality",
        "priority": "medium",
        "dependencies": [92, 93, 94],
        "status": "done",
        "subtasks": []
      }
    ]
  }
}